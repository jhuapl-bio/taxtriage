/*
 * TaxTriage Nextflow Configuration
 * Generated automatically by TaxTriage Geneious Plugin
 */

// Workflow parameters
params {
    // Core parameters
    preset                = '${preset}'
    quality_threshold     = ${quality_threshold}
    min_read_length       = ${min_read_length}
    enable_subsampling    = ${enable_subsampling}
    subsample_size        = ${subsample_size}

    // Database configuration
    kraken_db            = '${kraken_db}'
    bracken_db           = '${bracken_db}'

    // Output configuration
    outdir               = '${outdir}'

    // Advanced parameters
    top_taxa             = ${top_taxa}
    confidence_threshold = ${confidence_threshold}
    enable_krona         = ${enable_krona}
    enable_multiqc       = ${enable_multiqc}

    // Resource limits
    max_cpus             = ${max_cpus}
    max_memory           = '${max_memory}'
    max_time             = '24.h'

    // Input validation
    validate_params      = true
    help                 = false

    // MultiQC options
    multiqc_config       = null
    multiqc_title        = 'TaxTriage Results'

    // Krona options
    krona_taxonomy       = null
}

// Process configuration
process {
    // Default resource requirements
    cpus   = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h * task.attempt, 'time' ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Resource requirements by process label
    withLabel:process_single {
        cpus   = { check_max( 1, 'cpus' ) }
        memory = { check_max( 6.GB * task.attempt, 'memory' ) }
        time   = { check_max( 4.h * task.attempt, 'time' ) }
    }

    withLabel:process_low {
        cpus   = { check_max( 2 * task.attempt, 'cpus' ) }
        memory = { check_max( 12.GB * task.attempt, 'memory' ) }
        time   = { check_max( 4.h * task.attempt, 'time' ) }
    }

    withLabel:process_medium {
        cpus   = { check_max( 6 * task.attempt, 'cpus' ) }
        memory = { check_max( 36.GB * task.attempt, 'memory' ) }
        time   = { check_max( 8.h * task.attempt, 'time' ) }
    }

    withLabel:process_high {
        cpus   = { check_max( 12 * task.attempt, 'cpus' ) }
        memory = { check_max( 72.GB * task.attempt, 'memory' ) }
        time   = { check_max( 16.h * task.attempt, 'time' ) }
    }

    withLabel:process_long {
        time   = { check_max( 20.h * task.attempt, 'time' ) }
    }

    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }

    // Kraken2 specific resources
    withName:'KRAKEN2_KRAKEN2' {
        cpus   = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time   = { check_max( 8.h * task.attempt, 'time' ) }
    }

    // Bracken specific resources
    withName:'BRACKEN_BRACKEN' {
        cpus   = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time   = { check_max( 4.h * task.attempt, 'time' ) }
    }
}

// Execution profiles
profiles {
    debug {
        cleanup = false
        dumpHashes = true
        process.beforeScript = 'echo $HOSTNAME'
    }

    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        docker.runOptions      = "-v ${docker_volumes}"
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }

    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }

    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }

    test {
        includeConfig 'conf/test.config'
    }

    test_full {
        includeConfig 'conf/test_full.config'
    }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'taxtriage'
    author          = 'Johns Hopkins University Applied Physics Laboratory'
    homePage        = 'https://github.com/jhuapl-bio/taxtriage'
    description     = 'Taxonomic classification and abundance estimation pipeline'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '1.0.0'
    doi             = ''
}

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}