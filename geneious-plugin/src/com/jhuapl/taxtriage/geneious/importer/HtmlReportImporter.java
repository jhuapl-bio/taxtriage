package com.jhuapl.taxtriage.geneious.importer;

import com.biomatters.geneious.publicapi.documents.AnnotatedPluginDocument;
import com.biomatters.geneious.publicapi.documents.DocumentUtilities;
import com.biomatters.geneious.publicapi.implementations.TextDocument;
import com.biomatters.geneious.publicapi.plugin.DocumentOperationException;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Date;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Imports HTML reports from TaxTriage output into Geneious as viewable documents.
 *
 * This importer processes HTML reports generated by various TaxTriage tools
 * (MultiQC, FastP, etc.) and creates documents that preserve the HTML content
 * while providing useful metadata and summaries.
 *
 * @author Johns Hopkins University Applied Physics Laboratory
 * @version 1.0.0
 */
public class HtmlReportImporter {

    private static final Logger logger = Logger.getLogger(HtmlReportImporter.class.getName());

    /** Maximum HTML file size to process (10MB) */
    private static final long MAX_HTML_SIZE = 10 * 1024 * 1024;

    /** Pattern to extract title from HTML */
    private static final Pattern TITLE_PATTERN = Pattern.compile("<title[^>]*>([^<]+)</title>", Pattern.CASE_INSENSITIVE);

    /** Pattern to extract meta description */
    private static final Pattern META_DESCRIPTION_PATTERN = Pattern.compile(
            "<meta[^>]+name=[\"']description[\"'][^>]+content=[\"']([^\"']+)[\"'][^>]*>", Pattern.CASE_INSENSITIVE);

    /** Pattern to detect report type from content */
    private static final Pattern MULTIQC_PATTERN = Pattern.compile("MultiQC", Pattern.CASE_INSENSITIVE);
    private static final Pattern FASTP_PATTERN = Pattern.compile("fastp", Pattern.CASE_INSENSITIVE);
    private static final Pattern KRAKEN_PATTERN = Pattern.compile("kraken|classification", Pattern.CASE_INSENSITIVE);

    /**
     * Imports an HTML report file as a Geneious document.
     *
     * @param file the HTML file to import
     * @return the imported document, or null if import fails
     * @throws IOException if file reading fails
     */
    public AnnotatedPluginDocument importHtmlReport(File file) throws IOException {
        if (file == null || !file.exists() || !file.isFile()) {
            throw new IOException("Invalid HTML file: " + file);
        }

        if (file.length() > MAX_HTML_SIZE) {
            logger.warning("HTML file is very large (" + file.length() + " bytes): " + file.getName());
        }

        String htmlContent = Files.readString(file.toPath());
        HtmlMetadata metadata = extractMetadata(htmlContent);

        // Create document
        String documentName = generateDocumentName(file, metadata);
        String description = generateDescription(file, metadata, htmlContent);

        TextDocument document;
        try {
            document = new TextDocument(documentName, htmlContent, TextDocument.Format.Html);
        } catch (DocumentOperationException e) {
            throw new IOException("Failed to create TextDocument", e);
        }

        logger.info("Imported HTML report: " + file.getName() + " (Type: " + metadata.getReportType() + ")");
        return DocumentUtilities.createAnnotatedPluginDocument(document);
    }

    /**
     * Extracts metadata from HTML content.
     *
     * @param htmlContent the HTML content
     * @return extracted metadata
     */
    private HtmlMetadata extractMetadata(String htmlContent) {
        HtmlMetadata metadata = new HtmlMetadata();

        // Extract title
        Matcher titleMatcher = TITLE_PATTERN.matcher(htmlContent);
        if (titleMatcher.find()) {
            metadata.setTitle(titleMatcher.group(1).trim());
        }

        // Extract meta description
        Matcher descMatcher = META_DESCRIPTION_PATTERN.matcher(htmlContent);
        if (descMatcher.find()) {
            metadata.setMetaDescription(descMatcher.group(1).trim());
        }

        // Detect report type
        metadata.setReportType(detectReportType(htmlContent));

        // Extract sample information
        metadata.setSampleInfo(extractSampleInfo(htmlContent));

        // Extract statistics
        metadata.setStatistics(extractStatistics(htmlContent));

        return metadata;
    }

    /**
     * Detects the type of report from HTML content.
     *
     * @param htmlContent the HTML content
     * @return detected report type
     */
    private String detectReportType(String htmlContent) {
        if (MULTIQC_PATTERN.matcher(htmlContent).find()) {
            return "MultiQC Report";
        } else if (FASTP_PATTERN.matcher(htmlContent).find()) {
            return "FastP Quality Report";
        } else if (KRAKEN_PATTERN.matcher(htmlContent).find()) {
            return "Taxonomic Classification Report";
        } else if (htmlContent.toLowerCase().contains("quality")) {
            return "Quality Control Report";
        } else if (htmlContent.toLowerCase().contains("workflow")) {
            return "Workflow Report";
        }

        return "Analysis Report";
    }

    /**
     * Extracts sample information from HTML content.
     *
     * @param htmlContent the HTML content
     * @return sample information
     */
    private String extractSampleInfo(String htmlContent) {
        // Look for common sample identifiers
        StringBuilder sampleInfo = new StringBuilder();

        // Extract sample names from common patterns
        Pattern samplePattern = Pattern.compile("sample[^\\w]*([A-Za-z0-9_-]+)", Pattern.CASE_INSENSITIVE);
        Matcher sampleMatcher = samplePattern.matcher(htmlContent);
        if (sampleMatcher.find()) {
            sampleInfo.append("Sample: ").append(sampleMatcher.group(1));
        }

        // Look for file names
        Pattern filePattern = Pattern.compile("([A-Za-z0-9_-]+\\.(fastq|fq|fasta|fa))", Pattern.CASE_INSENSITIVE);
        Matcher fileMatcher = filePattern.matcher(htmlContent);
        if (fileMatcher.find()) {
            if (sampleInfo.length() > 0) sampleInfo.append(", ");
            sampleInfo.append("Input: ").append(fileMatcher.group(1));
        }

        return sampleInfo.toString();
    }

    /**
     * Extracts basic statistics from HTML content.
     *
     * @param htmlContent the HTML content
     * @return statistics summary
     */
    private String extractStatistics(String htmlContent) {
        StringBuilder stats = new StringBuilder();

        // Look for common statistics patterns
        Pattern readCountPattern = Pattern.compile("([0-9,]+)\\s*reads?", Pattern.CASE_INSENSITIVE);
        Matcher readMatcher = readCountPattern.matcher(htmlContent);
        if (readMatcher.find()) {
            stats.append("Reads: ").append(readMatcher.group(1));
        }

        // Look for quality scores
        Pattern qualityPattern = Pattern.compile("quality[^0-9]*([0-9.]+)", Pattern.CASE_INSENSITIVE);
        Matcher qualityMatcher = qualityPattern.matcher(htmlContent);
        if (qualityMatcher.find()) {
            if (stats.length() > 0) stats.append(", ");
            stats.append("Quality: ").append(qualityMatcher.group(1));
        }

        // Look for percentages
        Pattern percentPattern = Pattern.compile("([0-9.]+)%", Pattern.CASE_INSENSITIVE);
        Matcher percentMatcher = percentPattern.matcher(htmlContent);
        if (percentMatcher.find()) {
            if (stats.length() > 0) stats.append(", ");
            stats.append("Pass Rate: ").append(percentMatcher.group(1)).append("%");
        }

        return stats.toString();
    }

    /**
     * Generates an appropriate document name.
     *
     * @param file the source file
     * @param metadata the extracted metadata
     * @return document name
     */
    private String generateDocumentName(File file, HtmlMetadata metadata) {
        if (metadata.getTitle() != null && !metadata.getTitle().isEmpty()) {
            return metadata.getTitle();
        }

        String fileName = file.getName();
        if (fileName.toLowerCase().endsWith(".html")) {
            fileName = fileName.substring(0, fileName.length() - 5);
        }

        return fileName + " Report";
    }

    /**
     * Generates a description for the document.
     *
     * @param file the source file
     * @param metadata the extracted metadata
     * @param htmlContent the HTML content
     * @return description string
     */
    private String generateDescription(File file, HtmlMetadata metadata, String htmlContent) {
        StringBuilder description = new StringBuilder();
        description.append(metadata.getReportType()).append(" generated from TaxTriage workflow. ");

        if (metadata.getMetaDescription() != null && !metadata.getMetaDescription().isEmpty()) {
            description.append(metadata.getMetaDescription()).append(" ");
        }

        if (metadata.getSampleInfo() != null && !metadata.getSampleInfo().isEmpty()) {
            description.append(metadata.getSampleInfo()).append(". ");
        }

        if (metadata.getStatistics() != null && !metadata.getStatistics().isEmpty()) {
            description.append(metadata.getStatistics()).append(". ");
        }

        description.append("File size: ").append(formatFileSize(file.length())).append(".");

        return description.toString();
    }

    /**
     * Generates display content for the document.
     *
     * @param file the source file
     * @param metadata the extracted metadata
     * @param htmlContent the original HTML content
     * @return formatted display content
     */
    private String generateDisplayContent(File file, HtmlMetadata metadata, String htmlContent) {
        StringBuilder content = new StringBuilder();

        // Header
        content.append("=== HTML Report ===\n\n");
        content.append("File: ").append(file.getName()).append("\n");
        content.append("Type: ").append(metadata.getReportType()).append("\n");
        content.append("Size: ").append(formatFileSize(file.length())).append("\n");
        content.append("Last Modified: ").append(new Date(file.lastModified())).append("\n\n");

        // Metadata
        if (metadata.getTitle() != null) {
            content.append("Title: ").append(metadata.getTitle()).append("\n");
        }
        if (metadata.getSampleInfo() != null && !metadata.getSampleInfo().isEmpty()) {
            content.append("Sample Info: ").append(metadata.getSampleInfo()).append("\n");
        }
        if (metadata.getStatistics() != null && !metadata.getStatistics().isEmpty()) {
            content.append("Statistics: ").append(metadata.getStatistics()).append("\n");
        }

        content.append("\n=== HTML Content ===\n");
        content.append("Note: This is an HTML report file. To view the full interactive report, ");
        content.append("export this document and open it in a web browser.\n\n");

        // Include first part of HTML for reference
        String preview = htmlContent.length() > 2000 ? htmlContent.substring(0, 2000) + "..." : htmlContent;
        content.append("HTML Preview:\n");
        content.append(preview);

        return content.toString();
    }

    /**
     * Formats file size in human-readable format.
     *
     * @param size the file size in bytes
     * @return formatted string
     */
    private String formatFileSize(long size) {
        if (size < 1024) {
            return size + " bytes";
        } else if (size < 1024 * 1024) {
            return String.format("%.1f KB", size / 1024.0);
        } else {
            return String.format("%.1f MB", size / (1024.0 * 1024.0));
        }
    }

    /**
     * Checks if a file appears to be an HTML file.
     *
     * @param file the file to check
     * @return true if it appears to be an HTML file
     */
    public boolean isHtmlFile(File file) {
        if (file == null || !file.exists() || !file.isFile()) {
            return false;
        }

        String name = file.getName().toLowerCase();
        if (name.endsWith(".html") || name.endsWith(".htm")) {
            return true;
        }

        // Check content
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String firstLine = reader.readLine();
            if (firstLine != null) {
                String line = firstLine.toLowerCase().trim();
                return line.startsWith("<!doctype html") || line.startsWith("<html") || line.contains("<html");
            }
        } catch (IOException e) {
            return false;
        }

        return false;
    }

    /**
     * Holds metadata extracted from HTML reports.
     */
    private static class HtmlMetadata {
        private String title;
        private String metaDescription;
        private String reportType;
        private String sampleInfo;
        private String statistics;

        public String getTitle() { return title; }
        public void setTitle(String title) { this.title = title; }

        public String getMetaDescription() { return metaDescription; }
        public void setMetaDescription(String metaDescription) { this.metaDescription = metaDescription; }

        public String getReportType() { return reportType; }
        public void setReportType(String reportType) { this.reportType = reportType; }

        public String getSampleInfo() { return sampleInfo; }
        public void setSampleInfo(String sampleInfo) { this.sampleInfo = sampleInfo; }

        public String getStatistics() { return statistics; }
        public void setStatistics(String statistics) { this.statistics = statistics; }
    }
}