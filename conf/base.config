/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/taxtriage Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/


singularity {
    autoMounts = true
}

process {

    // TODO nf-core: Check the defaults for all processes
    cpus   = { check_max( 4    * task.attempt, 'cpus'   ) }
    memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    // These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    // If possible, it would be nice to keep the same label naming convention when
    // adding in your local modules too.
    // TODO nf-core: Customise requirements for specific processes.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors

    withLabel:process_tiny {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( .01.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }

    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 6.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_dynamic {
        cpus   = { check_max( 2 * task.attempt, 'cpus') }
        memory = { check_max( 50.GB * task.attempt * 2, 'memory') } // Starts with 50 GB and doubles each attempt
        time   = { check_max( 12.h * task.attempt, 'time') }
    }

    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_standard {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 50.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 10    * task.attempt, 'cpus'    ) }
        memory = { check_max( 90.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 12.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_suphigh {
        cpus   = { check_max( 20    * task.attempt, 'cpus'    ) }
        memory = { check_max( 450.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 15.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_extreme {
        cpus   = { check_max( 20    * task.attempt, 'cpus'    ) }
        memory = { check_max( 825.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 48.h  * task.attempt, 'time'    ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    withName:FLYE {
        errorStrategy = 'ignore'
        maxRetries = 0
        ext.args = ' --meta '
    }
    withName:MEGAHIT {
        errorStrategy = 'ignore'
        maxRetries = 0
    }
    withName:PYCOQC {
        errorStrategy = 'ignore'
        maxRetries = 0
    }
    withName:MERGEDSUBSPECIES {
        errorStrategy = 'ignore'
        maxRetries = 0
    }
    withName:RSEQC_BAMSTAT {
        errorStrategy = 'ignore'
        maxRetries = 0
    }
    withName:BOWTIE2_BUILD {
        errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
        memory = { check_max(65.GB * task.attempt * 2, 'memory') } // Starts with 50 GB and doubles each attempt
        maxRetries = 3
    }
    withName:KRAKEN2_KRAKEN2 {
        errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'ignore' }
        memory = { check_max(90.GB * task.attempt * 2, 'memory') } // Starts with 50 GB and doubles each attempt
        maxRetries = 3
    }
    withName:TOP_HITS {
        errorStrategy = 'ignore'
        maxRetries = 0
    }
    withName:BEDTOOLS_DEPTHCOVERAGE {
        errorStrategy = 'ignore'
        maxRetries = 0
    }
    withName:KREPORT_TO_KRONATXT {
        errorStrategy = 'ignore'
        maxRetries = 0
    }
    withName: PORECHOP {
        memory = { check_max(36.GB * task.attempt * 2, 'memory') } // Starts with 50 GB and doubles each attempt
        maxRetries = 4
        errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    }

    withName:KRONA_KTIMPORTTEXT {
        errorStrategy = 'ignore'
        maxRetries = 0
    }


    withName:MOVE_NANOPLOT {
        errorStrategy = 'ignore'
        maxRetries = 0
    }
    withName:NANOPLOT {
        memory = { check_max(12.GB * task.attempt * 2, 'memory') } // Starts with 50 GB and doubles each attempt
        maxRetries = 4
        errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    }
    withName: METRIC_ALIGNMENT {
        errorStrategy = 'ignore'
        maxRetries = 0
    }
    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }
}
