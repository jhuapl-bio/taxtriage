/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

if (params.low_memory){
    process {
        withName: KRAKEN2_KRAKEN2 {
            memory = params.force_mem ? "${params.force_mem}" : { check_max(36.GB * task.attempt * 2, 'memory') } // Starts with 50 GB and doubles each attempt
            ext.args = ' --memory-mapping  '
        }
    }
} else {
    withName: KRAKEN2_KRAKEN2 {
        memory = params.force_mem ? "${params.force_mem}" : { check_max(36.GB * task.attempt * 2, 'memory') } // Starts with 50 GB and doubles each attempt
    }
}



process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName:MULTIQC {
        ext {
            args = ''
        }
        errorStrategy  = 'ignore'
        publishDir = [path:{ "${params.outdir}/report" }, mode:'copy', saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]
    }

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BCFTOOLS_MPILEUP{
        ext.args2 = ' -c '
        errorStrategy  = 'ignore'
    }

    withName: MERGE_ALIGNMENT_MERGES {
        errorStrategy  = 'ignore'
    }


    withName: MERGE_FASTA{
        errorStrategy = {
            task.exitStatus in ['1','143','137','104','134','139'] ? 'retry' : task.exitStatus in [255] ? 'ignore' : 'finish'
        }
    }

    withName: FASTQC{
        errorStrategy  = 'ignore'
        ext.args = '--quiet'
    }
    withName: NANOPLOT{
        errorStrategy  = 'ignore'
    }
    withName: BCFTOOLS_STATS {
        errorStrategy = {
            task.exitStatus in ['1','143','137','104','134','139'] ? 'retry' : task.exitStatus in [255] ? 'ignore' : 'finish'
        }
    }
    withName: SAMTOOLS_VIEW{
        ext.prefix = { "${meta.id}.remove" }
    }
    withName: SAMTOOLS_INDEX {
        ext.args = ' -c '
        publishDir = [path:{ "${params.outdir}/alignment" }, mode:'copy', saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]
    }
    withName: SAMTOOLS_MERGE {
        publishDir = [path:{ "${params.outdir}/alignment" }, mode:'copy', saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]
    }

    withName: BCFTOOLS_CONSENSUS{
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.consensus" }
    }
    withName: ALIGNMENT_PER_SAMPLE {
        errorStrategy = 'ignore'
    }
    withName: MEGAHIT {
        errorStrategy = 'ignore'
        ext.args = ''
    }
    withName: KRONA_KTIMPORTTEXT {
        errorStrategy  = 'ignore'
        publishDir = [path:{ "${params.outdir}/report" }, mode:'copy', saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]
    }
    withName: MEGAHIT_LONG {
        errorStrategy = 'ignore'
    }
    withName: FEATURES_MAP {
        errorStrategy = 'ignore'
    }
    withName: DIAMOND_MAKEDB {
        errorStrategy = 'ignore'
    }
    withName: DIAMOND_BLASTX {
        errorStrategy = 'ignore'
        ext.args = '--very-sensitive'
    }
    withName: MAP_PROT_ASSEMBLY {
        errorStrategy = 'ignore'
    }
    withName: TOP_HITS {
        ext.singularity_pull_docker_container = true
        errorStrategy = 'ignore'
    }
    withName: MAP_TAXID_ASSEMBLY {
        ext.singularity_pull_docker_container = true
        errorStrategy = 'ignore'
    }
    withName: ORGANISM_MERGE_REPORT {
        ext.singularity_pull_docker_container = true
        errorStrategy = 'ignore'
    }
    withName: FASTP {
        ext.args = ''
        memory = { check_max(36.GB * task.attempt * 2, 'memory') } // Starts with GB and doubles each attempt
        maxRetries = 2
        errorStrategy = { task.exitStatus in ['143','137','104','134','139','1'] ? 'retry' : 'ignore' }
    }
    withName: FEATURES_DOWNLOAD {
        errorStrategy = 'ignore'
    }
    withName: FEATURES_TO_BED  {
        errorStrategy = 'ignore'
    }
    withName: BEDTOOLS_COVERAGE  {
        errorStrategy = 'ignore'
        publishDir = [path:{ "${params.outdir}/alignment" }, mode:'copy', saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]
    }
    withName: BOWTIE2_ALIGN {
        ext.args = ''
        maxRetries = 0
        errorStrategy = 'ignore'
        publishDir = [path:{ "${params.outdir}/alignment" }, mode:'copy', saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]
    }
    withName: HISAT2_ALIGN {
        maxRetries = 0
        errorStrategy = 'ignore'
        publishDir = [path:{ "${params.outdir}/alignment" }, mode:'copy', saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]
    }
    withName: BBMAP_BBNORM {
        maxRetries = 0
        errorStrategy = 'ignore'
    }

    withName: 'MINIMAP2_ALIGN' {
        maxRetries     = 2
        memory = params.force_mem ? "${params.force_mem}" : { check_max(72.GB * task.attempt * 2, 'memory') } // Starts with 50 GB and doubles each attempt
        errorStrategy  = { task.exitStatus in ['143','137','104','134','139','1'] ? 'retry' : 'ignore' }
        // ext.args will be evaluated at runtime:
        ext.args = {
            // only append --split-prefix on retry (i.e. second attempt or beyond)
            task.attempt > 1 ? "--split-prefix ${params.splitPrefix}" : ''
        }
    }
    withName: FILTER_MINIMAP2 {
        maxRetries     = 1
        memory = params.force_mem ? "${params.force_mem}" : { check_max(72.GB * task.attempt * 2, 'memory') } // Starts with 50 GB and doubles each attempt
        errorStrategy  = { task.exitStatus in ['143','137','104','134','139','1'] ? 'retry' : 'ignore' }
        ext.args = {
            // only append --split-prefix on retry (i.e. second attempt or beyond)
            task.attempt > 1 ? "--split-prefix ${params.splitPrefix} -N 1" : '-N 1'
        }
    }

    withName: SAMTOOLS_HIST_COVERAGE {
        ext.args = ' -w 100  '
        ext.prefix = { "${meta.id}.histogram" }
        publishDir = [path:{ "${params.outdir}/alignment" }, mode:'copy', saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]

    }
    withName: FILTERED_STATS {
        publishDir = [path:{ "${params.outdir}/alignment" }, mode:'copy', saveAs:{ filename -> filename.equals('versions.yml') ? null : filename }]
    }
    withName: FILTERED_STATS {
        errorStrategy = 'ignore'
    }
    withName: TAXPASTA_STANDARDISE {
        errorStrategy = 'ignore'
    }
    withName: METAPHLAN_METAPHLAN {
        errorStrategy = 'ignore'
    }

    withName: 'FLYE' {
        ext.args =  "--meta "
        publishDir = [
            [
                path: { "${params.outdir}/assembly/flye/meta" },
                mode: params.publish_dir_mode,
                pattern: '*.{fa.gz,gfa.gz}'
            ],
            [
                path: { "${params.outdir}/assembly/flye/meta/log" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ]
        ]
    }




    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
