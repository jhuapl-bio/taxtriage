/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
nf-core/taxtriage Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // TODO nf-core: Specify your pipeline's command line flags
    // Input options
    input = null
    low_memory = null

    unknown_sample = null
    skip_report = null
    use_bt2 = null
    use_denovo = null
    use_diamond = null
    use_hisat2 = null
    seq_center = null
    save_unaligned = null
    skip_confidence = null
    sensitive = null
    blastdb = null
    metaphlan = null
    classifiers = 'kraken2'
    remove_reference_file = null
    top_per_taxa = null
    skip_pathogens = false

    fastq_1 = null
    fastq_2 = null
    platform = null
    trim = false
    sample = null
    seq_summary = null
    type = null


    min_conf = 0.6
    gini_weight = 0.71
    disparity_score_weight = 0.0
    breadth_weight = 0.24
    minhash_weight = 0.05
    mapq_weight = 0.0
    hmp_weight = 0.0
    reward_factor = 4
    dispersion_factor = 0.55
    pathogens = null
    organisms = null
    fuzzy = null
    min_reads_align = 1
    zscore_accepted = 1.5
    minmapq = 5
    mmap2_window = null
    mmap2_fraction_filter = 0.0009
    bt2_indices = null
    bt2_scoremin = null
    refresh_download = null
    genome = null
    igenomes_base = 's3://ngi-igenomes/igenomes'
    igenomes_ignore = false
    assembly_file_type = 'ncbi'
    reference_fasta = null
    recursive_reference = false
    decompress_pre_megahit = false
    distributions = "assets/taxid_abundance_stats.hmp.tsv.gz"

    classifier = 'kraken2'
    get_pathogens = null
    filter_kraken2 = null
    minq = null
    compress_species = null
    remove_taxids = null

    remove_taxids =  null
    get_features = null
    taxdump = null
    save_classified_fastq = false
    skip_krona = false
    force_mem = null
    k2_minimum_hit_groups = null
    organisms_file = null
    show_commensals = null
    show_potentials = null
    show_unidentified = null
    skip_kraken2 = false
    get_variants = false
    reference_assembly = null
    skip_plots = false
    skip_realignment = false
    skip_stats = false
    skip_multiqc = false
    remove_commensal = false
    use_megahit_longreads = false
    spades_hmm = null
    add_irregular_top_hits = false
    taxtab = 'default'
    skip_fastp = false
    save_unclassified_fastq = null
    skip_refpull = false
    downsample = false
    genomes = null
    assembly = null
    clip_r1 = null
    clip_r2 = null
    three_prime_clip_r1 = null
    three_prime_clip_r2 = null

    top_hits_count = null
    db = null
    subsample = null
    k2_confidence = null
    skip_consensus = null
    skip_features = null
    skip_variants = null
    subsample = null
    download_db = null
    download_taxdump = null
    jump_threshold = null
    gap_allowance = 0.1
    top_per_taxa = null

    ignore_missing = true

    // MultiQC options
    multiqc_config = null
    multiqc_title = null
    multiqc_logo = null
    max_multiqc_email_size = '25.MB'

    // Boilerplate options
    outdir = null
    publish_dir_mode = 'copy'
    email = null
    email_on_fail = null
    plaintext_email = false
    monochrome_logs = false
    help = false
    validate_params = true
    show_hidden_params = false
    schema_ignore_params = 'genomes'
    enable_conda = false

    // Config options
    custom_config_version = 'master'
    custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact = null
    config_profile_url = null
    config_profile_name = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory = '1380.GB'
    max_cpus = 16
    max_time = '240.h'

}




// Load base.config by default for all pipelines
includeConfig 'conf/base.config'
includeConfig 'conf/igenomes.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/taxtriage custom profiles from different institutions.
// Warning: Uncomment only if a pipeline-specific instititutional config already exists on nf-core/configs!
// try {
// includeConfig "${params.custom_config_base}/pipeline/taxtriage.config"
// } catch (Exception e) {
// System.err.println("WARNING: Could not load nf-core/config/taxtriage profiles: ${params.custom_config_base}/pipeline/taxtriage.config")
// }

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda = true
        docker.enabled = false
        singularity.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
    }
    docker {
        docker.enabled = true
        singularity.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
    }
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        docker.enabled = false
        podman.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    podman {
        podman.enabled = true
        docker.enabled = false
        singularity.enabled = false
        shifter.enabled = false
        charliecloud.enabled = false
    }
    shifter {
        shifter.enabled = true
        docker.enabled = false
        singularity.enabled = false
        podman.enabled = false
        charliecloud.enabled = false
    }
    charliecloud {
        charliecloud.enabled = true
        docker.enabled = false
        singularity.enabled = false
        podman.enabled = false
        shifter.enabled = false
    }
    slurm {
        process.executor = 'slurm'
    }
    sge {
        process.executor = 'sge'
        process.clusterOptions = { "-l h_vmem=${task.memory.toMega()}M" }
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    test { includeConfig 'conf/test.config' }
    test_viral { includeConfig 'conf/test_viral.config' }
    local { includeConfig 'conf/local.config' }
    mce { includeConfig 'conf/mce.config' }
    mce_seqera { includeConfig 'conf/mce_seqera.config' }
}
apptainer.registry = 'quay.io'
docker.registry = 'quay.io'
podman.registry = 'quay.io'

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.


// Capture exit codes from upstream processes when piping

process.shell = ['/bin/bash', '-euo', 'pipefail']





def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
    overwrite = true
}
trace {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
    name = 'nf-core/taxtriage'
    author = 'Brian Merritt'
    homePage = 'https://github.com/nf-core/taxtriage'
    description = 'APHL pipeline for triage classification reports'
    mainScript = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version = '1.0dev'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
        if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
        else
        return obj
    } catch (all) {
        println " ### ERROR ### Max memory '${params.max_memory}' is not valid! Using default value: $obj"
        return obj
    }
    } else if (type == 'time') {
        try {
        if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
        else
        return obj
        } catch (all) {
        println " ### ERROR ### Max time '${params.max_time}' is not valid! Using default value: $obj"
        return obj
        }
    } else if (type == 'cpus') {
    try {
        return Math.min( obj, params.max_cpus as int )
    } catch (all) {
        println " ### ERROR ### Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
        return obj
    }
    }
}
